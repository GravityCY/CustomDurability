plugins {
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.23'
}

version = "$rootProject.mod_version+$project.name"
group = "me.gravityio"

def javaVersionNum = project.java_version.toInteger()
def javaVersion = JavaVersion.toVersion(javaVersionNum)
def nameWithVer = "$rootProject.mod_name $project.version"
def minecraftVersions = project.minecraft_versions.split(" ").toList()
def curseforgeId = rootProject.curseforge_id.toInteger()

loom {
    runConfigs.all {
        ideConfigGenerated true // Run configurations are not created for subprojects by default
        runDir "../../run" // Use a shared run folder and just create separate worlds
    }
    def f = file("src/main/resources/customdurability.accesswidener")
    if (f.exists()) {
        accessWidenerPath = f
    }
}

base {
    archivesName = rootProject.mod_id
}

repositories {
    mavenLocal()
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

// Default Depenendecies
project.dependencies.add("minecraft", "com.mojang:minecraft:${project.name}")
project.dependencies.add("mappings", loom.layered() {
    officialMojangMappings()
    parchment("org.parchmentmc.data:parchment-${project.parchment_version_mc}:${project.parchment_version}@zip")
})
project.dependencies.add("modImplementation", "net.fabricmc:fabric-loader:${project.loader_version}")
project.dependencies.add("modImplementation", "net.fabricmc.fabric-api:fabric-api:$project.fabric_version")

// Actual Dependencies
dependencies {
}

//tasks.register("subtask-a") {
//    dependsOn "subtask-b"
//    dependsOn "subtask-c"
//}
//
//tasks.register("subtask-b") {
//    dependsOn remapJar
//    doLast {
//        println "Subtask B"
//        rootProject.ext.data.get(stonecutter.current.project).modrinthFileId = project.version
//    }
//}
//
//tasks.register("subtask-c") {
//    dependsOn remapJar
//    doLast {
//        println "Subtask C"
//        rootProject.ext.data.get(stonecutter.current.project).curseFileId = project.version
//    }
//}

tasks.register('publishMod') {
    group = "publishing"

    dependsOn "modrinth"
    dependsOn "publishCurseForge"
}

tasks.register('publishCurseForge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    disableVersionDetection()

    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_UPLOAD");

    def mainFile = upload(curseforgeId, remapJar)
    mainFile.changelog = rootProject.changelog
    minecraftVersions.forEach {
        mainFile.addGameVersion(it)
    }
    mainFile.displayName = nameWithVer
    mainFile.
    mainFile.addModLoader("Fabric")
    mainFile.releaseType = "release"
    mainFile.addJavaVersion("Java ${javaVersionNum}");
    def fabricApi = "fabric-api"
    mainFile.addRequirement(fabricApi)

    doLast {
        rootProject.ext.data.get(stonecutter.current.project).curseFileId = mainFile.curseFileId
    }
}

modrinth {
    token = System.getenv("MODRINTH_UPLOAD")
    projectId = rootProject.modrinth_id
    versionName = nameWithVer
    versionNumber = project.version
    changelog = rootProject.changelog
    versionType = "release"
    uploadFile = remapJar
    gameVersions = minecraftVersions
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api"
    }
}

tasks.named("modrinth").configure {
    doLast {
        rootProject.ext.data.get(stonecutter.current.project).modrinthFileId = it.uploadInfo.id
    }
}

processResources  {
    def modProperties = [
            "mod_id": rootProject.mod_id,
            "mod_name": rootProject.mod_name,
            "mod_version": rootProject.mod_version,
            "mod_description": rootProject.mod_description,
            "mod_author": rootProject.mod_author,
            "mod_sources": rootProject.mod_sources,
            "mod_license": rootProject.mod_license,
            "minecraft_version_range": project.minecraft_version_range,
            "fabric_loader_version": rootProject.loader_version,
            "fabric_api_version": project.fabric_version,
            "java_version": javaVersionNum
    ]

    def mixinProperties = [
       "java_version": javaVersionNum
    ]

    inputs.properties(modProperties)

    filesMatching("fabric.mod.json") {
        expand modProperties
    }

    filesMatching("customdurability.mixins.json") {
        expand mixinProperties
    }

    if (project.name != "1.21") {
        doLast {
            File buildFolder = new File("$buildDir/resources/main")
            File oldFolder = new File(buildFolder, "data/cd/tags/item")
            File newFolder = new File(buildFolder, "data/cd/tags/items")

            if (oldFolder.exists()) {
                oldFolder.renameTo(newFolder)
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = javaVersionNum
}

java {
    withSourcesJar()

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}